function [ x, ERes ] = initial_optimization(p, q, d0, bCells, r1, r2, t1, t2)

    p = p';

    x0(:,1:2) = q;
    x0(:,3) = p;

    B = d0*bsxfun(@times,q,p);
    deltaP = d0*p;

    B1 = B - bsxfun(@times,deltaP,r1);
    B2 = B - bsxfun(@times,deltaP,r2);

    L1 = sqrt(sum(B1.^2,2));    
    L2 = sqrt(sum(B2.^2,2));
    
    Lscale = .5*(mean(L1) + mean(L2));
    
    energyFunc = @(x) reducedEnergy( x, sparse(d0), t1, t2, r1, r2, bCells );
    nonlinFunc = @(x) mycon( x, sparse(d0), Lscale, r1, r2, bCells );


    lb = -inf*ones(size(x0));
    lb(:,3) = .001;
    ub = inf*ones(size(x0));
    ub(:,3) = 1000;

    Aeq = [zeros(1,size(d0,2)),zeros(1,size(d0,2)),ones(1,size(d0,2))];
    beq = size(d0,2)*mean(p);

    optimset = optimoptions('fmincon','Display','none','Algorithm','interior-point','MaxFunEvals',2e6,...
                            'MaxIter',2e3,'TolFun',1e-5,'GradObj','on','GradConstr','on',...
                            'HessianApproximation','lbfgs');
    [x,ERes] = fmincon(energyFunc,x0,[],[],Aeq,beq,lb,ub,nonlinFunc,optimset);
end

function [ E, dE ] = reducedEnergy( x, d0, t1, t2, r1, r2, bCells )
    % REDUCED ENERGY 
    
    q = x(:,1:2);
    p = x(:,3);

    B = d0*bsxfun(@times,q,p);
    deltaP = d0*p;

    B1 = B - bsxfun(@times,deltaP,r1);
    B2 = B - bsxfun(@times,deltaP,r2);

    L1 = sqrt(sum(B1.^2,2));
    B1 = bsxfun(@rdivide,B1,L1);
    L2 = sqrt(sum(B2.^2,2));
    B2 = bsxfun(@rdivide,B2,L2);

    E = .5*mean( dot(B1,t1,2).^2 + dot(B2,t2,2).^2 );

    if (nargout == 2)
        NB = size(d0,1);
        NC = size(d0,2);
        [ drX1, drY1, drX2, drY2 ] = reducedLocalGrads( q, p, bCells, r1 ,r2 );

        IP1 = dot(B1,t1,2);
        IP2 = dot(B2,t2,2);

        dE = bsxfun(@times,IP1.*t1(:,1),drX1) + bsxfun(@times,IP1.*t1(:,2),drY1) + ...
             bsxfun(@times,IP2.*t2(:,1),drX2) + bsxfun(@times,IP2.*t2(:,2),drY2);
        dE = dE / NB;
        rows = [bCells(:,1);bCells(:,1)+NC;bCells(:,1)+2*NC;bCells(:,2);bCells(:,2)+NC;bCells(:,2)+2*NC];
        vals = dE(:);
        dE = accumarray(rows,vals',[3*NC,1]);

    end
end

function [ drX1, drY1, drX2, drY2 ] = reducedLocalGrads( q, p, bCells, r1 ,r2, norm )
    p1 = p(bCells(:,1));
    p2 = p(bCells(:,2));
    q1x = q(bCells(:,1),1);
    q1y = q(bCells(:,1),2);
    q2x = q(bCells(:,2),1);
    q2y = q(bCells(:,2),2);
    
    if (nargin == 5 || norm == 1)
        drX1 = sXGrad(p1,p2,q1x,q2x,q1y,q2y,r1(:,1),r1(:,2));
        drY1 = sYGrad(p1,p2,q1x,q2x,q1y,q2y,r1(:,1),r1(:,2));
        drX2 = sXGrad(p1,p2,q1x,q2x,q1y,q2y,r2(:,1),r2(:,2));
        drY2 = sYGrad(p1,p2,q1x,q2x,q1y,q2y,r2(:,1),r2(:,2));
    else
        drX1 = rXGrad(p1,p2,q1x,q2x,r1(:,1));
        drY1 = rYGrad(p1,p2,q1y,q2y,r1(:,2));
        drX2 = rXGrad(p1,p2,q1x,q2x,r2(:,1));
        drY2 = rYGrad(p1,p2,q1y,q2y,r2(:,2));
    end
end

function Dx = rXGrad(p1,p2,q1x,q2x,rx)
    %RXGRAD
    %    DX = RXGRAD(P1,P2,Q1X,Q2X,RX)
    
    %    This function was generated by the Symbolic Math Toolbox version 5.10.
    %    10-Jul-2017 12:37:18
    
    Dx = [p1,zeros(size(p1)),q1x-rx,-p2,zeros(size(p1)),-q2x+rx];
end

function Dy = rYGrad(p1,p2,q1y,q2y,ry)
    %RYGRAD
    %    DY = RYGRAD(P1,P2,Q1Y,Q2Y,RY)
    
    %    This function was generated by the Symbolic Math Toolbox version 5.10.
    %    10-Jul-2017 12:37:18
    
    Dy = [zeros(size(p1)),p1,q1y-ry,zeros(size(p1)),-p2,-q2y+ry];
end

function Dx = sXGrad(p1,p2,q1x,q2x,q1y,q2y,rx,ry)
    %SXGRAD
    %    DX = SXGRAD(P1,P2,Q1X,Q2X,Q1Y,Q2Y,RX,RY)
    
    %    This function was generated by the Symbolic Math Toolbox version 5.10.
    %    04-Jul-2017 12:42:53
    
    t3 = p1-p2;
    t5 = p1.*q1x;
    t6 = p2.*q2x;
    t7 = rx.*t3;
    t2 = -t5+t6+t7;
    t9 = p1.*q1y;
    t10 = p2.*q2y;
    t11 = ry.*t3;
    t4 = -t9+t10+t11;
    t8 = t2.^2;
    t12 = t4.^2;
    t13 = t8+t12;
    t14 = 1.0./t13.^(3.0./2.0);
    t15 = 1.0./sqrt(t13);
    t16 = q1x-rx;
    t17 = q2x-rx;
    Dx = [p1.*t15-p1.*t8.*t14,-p1.*t2.*t4.*t14,...
          t15.*t16-t2.*t14.*(t2.*t16.*2.0+t4.*(q1y-ry).*2.0).*(1.0./2.0),...
          -p2.*t15+p2.*t8.*t14,p2.*t2.*t4.*t14,...
          -t15.*t17+t2.*t14.*(t2.*t17.*2.0+t4.*(q2y-ry).*2.0).*(1.0./2.0)];
end

function Dy = sYGrad(p1,p2,q1x,q2x,q1y,q2y,rx,ry)
    %SYGRAD
    %    DY = SYGRAD(P1,P2,Q1X,Q2X,Q1Y,Q2Y,RX,RY)
    
    %    This function was generated by the Symbolic Math Toolbox version 5.10.
    %    04-Jul-2017 12:42:54
    
    t3 = p1-p2;
    t5 = p1.*q1x;
    t6 = p2.*q2x;
    t7 = rx.*t3;
    t2 = -t5+t6+t7;
    t8 = p1.*q1y;
    t9 = p2.*q2y;
    t10 = ry.*t3;
    t4 = -t8+t9+t10;
    t11 = t2.^2;
    t12 = t4.^2;
    t13 = t11+t12;
    t14 = 1.0./t13.^(3.0./2.0);
    t15 = 1.0./sqrt(t13);
    t16 = q1y-ry;
    t17 = q2y-ry;
    Dy = [-p1.*t2.*t4.*t14,p1.*t15-p1.*t12.*t14,...
          t15.*t16-t4.*t14.*(t4.*t16.*2.0+t2.*(q1x-rx).*2.0).*(1.0./2.0),...
          p2.*t2.*t4.*t14,-p2.*t15+p2.*t12.*t14,...
          -t15.*t17+t4.*t14.*(t4.*t17.*2.0+t2.*(q2x-rx).*2.0).*(1.0./2.0)];
end

function [ clin, ceq, dlin, deq ] = mycon( x, d0, Lscale, r1, r2, bCells )

    NB = size(d0,1);
    NC = size(d0,2);
    q = x(:,1:2);
    p = x(:,3);
    clin = [];

    B = d0*bsxfun(@times,q,p);
    deltaP = d0*p;

    B1 = B - bsxfun(@times,deltaP,r1);
    B2 = B - bsxfun(@times,deltaP,r2);

    L1 = sqrt(sum(B1.^2,2));
    B1 = bsxfun(@rdivide,B1,L1);
    
    L2 = sqrt(sum(B2.^2,2));
    B2 = bsxfun(@rdivide,B2,L2);
    
    ceq = .5*(mean(L1) + mean(L2)) - Lscale;
    if (nargout > 2)
        dlin = [];
        [ drX1, drY1, drX2, drY2 ] = reducedLocalGrads( q, p, bCells, r1 ,r2, 0 );
        deq = .5*(bsxfun(@times,B1(:,1),drX1) + bsxfun(@times,B1(:,2),drY1)) + ...
              .5*(bsxfun(@times,B2(:,1),drX2) + bsxfun(@times,B2(:,2),drY2));
        rows = [bCells(:,1);bCells(:,1)+NC;bCells(:,1)+2*NC;bCells(:,2);bCells(:,2)+NC;bCells(:,2)+2*NC];
        deq = accumarray(rows,deq(:)/NB,[3*NC,1]);
    end
    
end